// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  username      String?   @unique
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User preferences
  selectedBranch    String?
  selectedYear      String?
  selectedSemester  String?
  
  // Relations
  sessions      Session[]
  accounts      Account[]
  progress      UserProgress[]
  analytics     UserAnalytics[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  year        String
  branch      String
  semester    String
  subject     String
  module      String
  topic       String
  videoTitle  String?
  noteTitle   String?
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, year, branch, semester, subject, module, topic, videoTitle, noteTitle])
  @@index([userId, year, branch, semester])
  @@index([userId, subject])
  @@map("user_progress")
}

model UserAnalytics {
  id            String   @id @default(cuid())
  userId        String
  action        String   // "view_subject", "complete_video", "download_note", etc.
  year          String?
  branch        String?
  semester      String?
  subject       String?
  module        String?
  topic         String?
  metadata      Json?    // Additional data about the action
  timestamp     DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp])
  @@index([action, timestamp])
  @@map("user_analytics")
}

model ContentCache {
  id        String   @id @default(cuid())
  key       String   @unique
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([key])
  @@index([expiresAt])
  @@map("content_cache")
}