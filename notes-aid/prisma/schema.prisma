generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?
  preferences   Json?
  progress      UserProgress[]
  analytics     UserAnalytics[]
  accounts      Account[]
  sessions      Session[]
  role String @default("user")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserProgress {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  year      String
  branch    String
  semester  String
  subject   String
  module    String
  topic     String
  videoTitle String?
  noteTitle  String?
  completed Boolean  @default(false)
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, year, branch, semester, subject, module, topic])
}

model UserAnalytics {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    String
  details   Json?
  createdAt DateTime @default(now())
}

model ContentCache {
  id        String   @id @default(cuid())
  key       String  @unique
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// NextAuth.js models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 